using HT.Framework;
using HT.Framework.ILHotfix;
using System;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// IL热更新环境
/// </summary>
public sealed class ILHotfixEnvironment
{
    public static ILHotfixEnvironment Environment;

    private Dictionary<Type, ILHotfixProcedure> _procedureInstances = new Dictionary<Type, ILHotfixProcedure>();
    private ILHotfixProcedure _currentProcedure;
    private Type _entranceProcedure;
    private float _timer = 0;

    public ILHotfixEnvironment()
    {
		Environment = this;

        List<Type> types = ILHotfixManager.Current.ILHotFixTypes;
        for (int i = 0; i < types.Count; i++)
        {
            if (types[i].BaseType == typeof(ILHotfixProcedureAdapter.Adaptor))
            {
                object[] atts = types[i].GetCustomAttributes(typeof(ILHotfixProcedureStateAttribute), false);
                if (atts.Length > 0)
                {
                    ILHotfixProcedureStateAttribute hpsa = atts[0] as ILHotfixProcedureStateAttribute;
                    if (hpsa != null)
                    {
                        if (hpsa.State == ILHotfixProcedureState.Entrance)
                        {
                            _entranceProcedure = types[i];
                            if (!_procedureInstances.ContainsKey(types[i]))
                            {
                                _procedureInstances.Add(types[i], Activator.CreateInstance(types[i]) as ILHotfixProcedure);
                            }
                        }
                        else if (hpsa.State == ILHotfixProcedureState.Normal)
                        {
                            if (!_procedureInstances.ContainsKey(types[i]))
                            {
                                _procedureInstances.Add(types[i], Activator.CreateInstance(types[i]) as ILHotfixProcedure);
                            }
                        }
                    }
                }
            }
        }

        foreach (KeyValuePair<Type, ILHotfixProcedure> procedureInstance in _procedureInstances)
        {
            procedureInstance.Value.OnInit();
        }

        if (_entranceProcedure != null)
        {
            _currentProcedure = _procedureInstances[_entranceProcedure];
            _currentProcedure.OnEnter();
        }
        else
        {
            GlobalTools.LogError("进入热更新流程失败：未指定热更新入口流程！");
        }

        ILHotfixManager.Current.UpdateILHotfixLogicEvent += UpdateHotfixLogic;
    }

    public void UpdateHotfixLogic()
    {
        if (_currentProcedure != null)
        {
            _currentProcedure.OnUpdate();

            if (_timer < 1)
            {
                _timer += Time.deltaTime;
            }
            else
            {
                _timer = 0;
                _currentProcedure.OnUpdateSecond();
            }
        }
    }

    /// <summary>
    /// 切换热更新流程
    /// </summary>
    public void SwitchProcedure<T>() where T : ILHotfixProcedure
    {
        if (_procedureInstances.ContainsKey(typeof(T)))
        {
            if (_currentProcedure == _procedureInstances[typeof(T)])
            {
                return;
            }

            if (_currentProcedure != null)
            {
                _currentProcedure.OnLeave();
            }

            _currentProcedure = _procedureInstances[typeof(T)];
            _currentProcedure.OnEnter();
        }
        else
        {
            GlobalTools.LogError("切换热更新流程失败：不存在流程 " + typeof(T).Name + " 或者流程未激活！");
        }
    }
}